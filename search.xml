<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Synthesizer-V-设置全局缩放的方法</title>
    <url>/2021/04/06/Synthesizer-V-%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E7%BC%A9%E6%94%BE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>众所周知，Synth V Studio在默认的 <code>NotoSansCJKjp-Regular</code> 字体下，界面渲染十分难受，用户看不清字，特别是高分屏，眼睛都快瞎了（），令人无比想念可以在设置内调整界面和字体缩放的第一代Synth V。</p>
<p>解决办法目前有俩：</p>
<ol>
<li>换字体。<code>Synth-V-Studio安装路径\fonts\</code>下替换<code>NotoSansCJKjp-Regular.otf</code>即可。个人推荐使用 <code>Microsoft Yahei Mono</code> （虽然是网友自行拼接<code>微软雅黑</code>和 <code>Consolas</code> 而成的 ），<em><strong>不过可能会有版权问题</strong></em>。``Synth V Studio` 每次升级后都要重新覆盖字体。</li>
<li>通过命令行加参数 <code>--with-scaling &lt;放大倍数&gt;</code> 的方式启动 <code>synthv-studio.exe</code> 。为方便起见可以将此保存成一个快捷方式。<br> <img src="/2021/04/06/Synthesizer-V-%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E7%BC%A9%E6%94%BE%E7%9A%84%E6%96%B9%E6%B3%95/image-20210406152541899.png" alt="image-20210406152541899"></li>
</ol>
]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
      <tags>
        <tag>Synth V</tag>
      </tags>
  </entry>
  <entry>
    <title>以Integer类为例的包装类型装箱拆箱与判断相等</title>
    <url>/2021/04/01/%E4%BB%A5Integer%E7%B1%BB%E4%B8%BA%E4%BE%8B%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1%E4%B8%8E%E5%88%A4%E6%96%AD%E7%9B%B8%E7%AD%89/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">app1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i1 = <span class="number">100</span>;</span><br><span class="line">        Integer j1 = <span class="number">100</span>;</span><br><span class="line">        System.out.println(i1 == j1); <span class="comment">// true </span></span><br><span class="line">        Integer i2 = <span class="number">129</span>;</span><br><span class="line">        Integer j2 = <span class="number">129</span>;</span><br><span class="line">        System.out.println(i2 == j2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么会这样呢.jpg</p>
<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol>
<li><p><code>==</code>判断地址相等</p>
</li>
<li><p>自动装箱时编译器调用<code>valueOf()</code>将原始类型值转换成对象，同时自动拆箱时，编译器通过调用类似<code>intValue()</code>,<code>doubleValue()</code>这类的方法将对象转换成原始类型值。</p>
<ul>
<li><code>Integer c = 200;</code>类似这样触发自动装箱</li>
<li><code>Integer.equals(int a)</code>也对a触发自动装箱</li>
<li><code>Integer == int</code>对<code>Integer</code>类型触发自动拆箱</li>
</ul>
</li>
<li><p><code>Object.equals()</code>默认</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>Integer.equals()</code>重写成</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">            <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 可见<code>Integer.equals()</code>是比较值。</p>
</li>
<li><p><code>Integer.intValue()</code></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> value;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
<li><p><code>Integer.valueOf()</code></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 在常量池中则返回池中引用，否则创建新的<code>Integer</code>对象。</p>
</li>
<li><p><code>Integer.IntegerCache</code>常量池</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cache to support the object identity semantics of autoboxing for values</span></span><br><span class="line"><span class="comment"> * between -128 and 127 (inclusive) as required by JLS.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The cache is initialized on first usage. The size of the cache may be</span></span><br><span class="line"><span class="comment"> * controlled by the &#123;<span class="doctag">@code</span> -XX:AutoBoxCacheMax=&lt;size&gt;&#125; option. During VM</span></span><br><span class="line"><span class="comment"> * initialization, java.lang.Integer.IntegerCache.high property may be set and</span></span><br><span class="line"><span class="comment"> * saved in the private system properties in the jdk.internal.misc.VM class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * WARNING: The cache is archived with CDS and reloaded from the shared archive</span></span><br><span class="line"><span class="comment"> * at runtime. The archived cache (Integer[]) and Integer objects reside in the</span></span><br><span class="line"><span class="comment"> * closed archive heap regions. Care should be taken when changing the</span></span><br><span class="line"><span class="comment"> * implementation and the cache array should not be assigned with new Integer</span></span><br><span class="line"><span class="comment"> * object(s) after initialization.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer[] cache;</span><br><span class="line">    <span class="keyword">static</span> Integer[] archivedCache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue = VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                h = Math.max(parseInt(integerCacheHighPropValue), <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(h, Integer.MAX_VALUE - (-low) - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load IntegerCache.archivedCache from archive, if possible</span></span><br><span class="line">        VM.initializeFromArchive(IntegerCache.class);</span><br><span class="line">        <span class="keyword">int</span> size = (high - low) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the archived cache if it exists and is large enough</span></span><br><span class="line">        <span class="keyword">if</span> (archivedCache == <span class="keyword">null</span> || size &gt; archivedCache.length) &#123;</span><br><span class="line">            Integer[] c = <span class="keyword">new</span> Integer[size];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">                c[i] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">            &#125;</span><br><span class="line">            archivedCache = c;</span><br><span class="line">        &#125;</span><br><span class="line">        cache = archivedCache;</span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>Integer(int)</code>构造函数</p>
 <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Constructs a newly allocated &#123;<span class="doctag">@code</span> Integer&#125; object that</span></span><br><span class="line"><span class="comment">  * represents the specified &#123;<span class="doctag">@code</span> int&#125; value.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>   value   the value to be represented by the</span></span><br><span class="line"><span class="comment">  *                  &#123;<span class="doctag">@code</span> Integer&#125; object.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@deprecated</span></span></span><br><span class="line"><span class="comment">  * It is rarely appropriate to use this constructor. The static factory</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> #valueOf(int)&#125; is generally a better choice, as it is</span></span><br><span class="line"><span class="comment">  * likely to yield significantly better space and time performance.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Deprecated</span>(since=<span class="string">&quot;9&quot;</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.value = value;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>   官方建议用静态工厂方法<code>valueOf(int)</code>替代本构造函数，因为在时间与空间方面的性能都更好。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = Integer.ValueOf(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p> 具体原因如下：</p>
<ul>
<li><code>Integer.ValueOf(int)</code>中有<code>IntegerCache</code>常量池，相当于做了一个缓存，在缓存范围内的都可以直接从缓存中取，而不必生成新的对象，提高了对象的利用率。</li>
</ul>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们用一段代码来总结各种情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">app1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer IntNew200_1 = <span class="keyword">new</span> Integer(<span class="number">200</span>);</span><br><span class="line">        Integer IntNew200_2 = <span class="keyword">new</span> Integer(<span class="number">200</span>);</span><br><span class="line">        Integer IntEqual200_1 = <span class="number">200</span>;</span><br><span class="line">        Integer IntEqual200_2 = <span class="number">200</span>;</span><br><span class="line">        Integer IntNew100_1 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        Integer IntNew100_2 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        Integer IntEqual100_1 = <span class="number">100</span>;</span><br><span class="line">        Integer IntEqual100_2 = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> IntPri200 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;两个new出来200\t\t==\t&quot;</span> + (IntNew200_2 == IntNew200_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个new出来200\t\tequal\t&quot;</span> + IntNew200_2.equals(IntNew200_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;new出200和int装箱200\t==\t&quot;</span> + (IntNew200_2 == IntEqual200_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;new出200和int装箱200\tequal\t&quot;</span> + (IntNew200_2.equals(IntEqual200_1)));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个int装箱200\t\t==\t&quot;</span> + (IntEqual200_1 == IntEqual200_2));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个int装箱200\t\tequal\t&quot;</span> + (IntEqual200_1.equals(IntEqual200_2)));</span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型200和new出200\t==\t&quot;</span> + (IntPri200 == IntNew200_2));</span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型200和new出200\tequal\t&quot;</span> + (IntNew200_2.equals(IntPri200)));</span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型200和int装箱200\t==\t&quot;</span> + (IntPri200 == IntEqual200_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型200和int装箱200\tequal\t&quot;</span> + (IntEqual200_1.equals(IntPri200)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;两个new出来100\t\t==\t&quot;</span> + (IntNew100_2 == IntNew100_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个new出来100\t\tequal\t&quot;</span> + IntNew100_2.equals(IntNew100_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;new出100和int装箱100\t==\t&quot;</span> + (IntNew100_2 == IntEqual100_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;new出100和int装箱100\tequal\t&quot;</span> + (IntNew100_2.equals(IntEqual100_1)));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个int装箱100\t\t==\t&quot;</span> + (IntEqual100_1 == IntEqual100_2));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个int装箱100\t\tequal\t&quot;</span> + (IntEqual100_1.equals(IntEqual100_2)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">两个<span class="keyword">new</span>出来<span class="number">200</span>          ==      <span class="literal">false</span></span><br><span class="line">两个<span class="keyword">new</span>出来<span class="number">200</span>          equal   <span class="literal">true</span> </span><br><span class="line"><span class="keyword">new</span>出<span class="number">200</span>和<span class="keyword">int</span>装箱<span class="number">200</span>    ==      <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span>出<span class="number">200</span>和<span class="keyword">int</span>装箱<span class="number">200</span>    equal   <span class="literal">true</span> </span><br><span class="line">两个<span class="keyword">int</span>装箱<span class="number">200</span>          ==      <span class="literal">false</span></span><br><span class="line">两个<span class="keyword">int</span>装箱<span class="number">200</span>          equal   <span class="literal">true</span> </span><br><span class="line">基本类型<span class="number">200</span>和<span class="keyword">new</span>出<span class="number">200</span>   ==      <span class="literal">true</span></span><br><span class="line">基本类型<span class="number">200</span>和<span class="keyword">new</span>出<span class="number">200</span>   equal   <span class="literal">true</span></span><br><span class="line">基本类型<span class="number">200</span>和<span class="keyword">int</span>装箱<span class="number">200</span> ==      <span class="literal">true</span></span><br><span class="line">基本类型<span class="number">200</span>和<span class="keyword">int</span>装箱<span class="number">200</span> equal   <span class="literal">true</span></span><br><span class="line">两个<span class="keyword">new</span>出来<span class="number">100</span>          ==      <span class="literal">false</span></span><br><span class="line">两个<span class="keyword">new</span>出来<span class="number">100</span>          equal   <span class="literal">true</span></span><br><span class="line"><span class="keyword">new</span>出<span class="number">100</span>和<span class="keyword">int</span>装箱<span class="number">100</span>    ==      <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span>出<span class="number">100</span>和<span class="keyword">int</span>装箱<span class="number">100</span>    equal   <span class="literal">true</span></span><br><span class="line">两个<span class="keyword">int</span>装箱<span class="number">100</span>          ==      <span class="literal">true</span></span><br><span class="line">两个<span class="keyword">int</span>装箱<span class="number">100</span>          equal   <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>对上述Output的理解：</p>
<ol>
<li>调用<code>Integer(int)</code>即创建一个新的对象。<code>==</code>比较地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
<li>调用<code>Integer(int)</code>即创建一个新的对象。<code>==</code>比较地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
<li><code>int</code>自动装箱成<code>Integer</code>，因值大小超出缓存范围，则新建对象，<code>==</code>比较地址。</li>
<li><code>int</code>自动装箱成<code>Integer</code>，<code>Integer.equal()</code>比较值。</li>
<li>比较时<code>Integer</code>自动拆箱成<code>int</code>，原始类型进行比较。</li>
<li>比较时<code>int</code>自动装箱成<code>Integer</code>，<code>equal()</code>比较值。</li>
<li>比较时<code>Integer</code>自动拆箱成<code>int</code>，原始类型进行比较。</li>
<li>比较时<code>int</code>自动装箱成<code>Integer</code>，<code>equal()</code>比较值</li>
<li>调用<code>Integer(int)</code>即创建一个新的对象。<code>==</code>比较地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
<li>调用<code>Integer(int)</code>即创建一个新的对象。<code>==</code>比较地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
<li><code>int</code>自动装箱成<code>Integer</code>，因值大小在缓存范围内，则使用常量池内对象的引用，<code>==</code>比较地址，是同一地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>高斯消元解异或方程组</title>
    <url>/2020/08/09/gauss-xor-equation/</url>
    <content><![CDATA[<p>当时遇到了道题，分析之后解异或方程组就完事了。代码如下：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Gauss</span>(<span class="params">Row: <span class="built_in">int</span>, Column: <span class="built_in">int</span></span>):</span></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    col = <span class="number">0</span></span><br><span class="line">    max_r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> row &amp;lt; Row <span class="keyword">and</span> col &amp;lt; Column:</span><br><span class="line">        max_r = row</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row+<span class="number">1</span>, Row):  <span class="comment"># 找出当前列最大值</span></span><br><span class="line">            <span class="keyword">if</span> (Matrix[i][col]) &gt; (Matrix[max_r][col]):</span><br><span class="line">                max_r = i</span><br><span class="line">        <span class="keyword">if</span> Matrix[max_r][col] == <span class="number">0</span>:  <span class="comment"># 记录自由变元</span></span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">            Free_x[Free_num] = col+<span class="number">1</span></span><br><span class="line">            Free_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> max_r != row:  <span class="comment"># 交换</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(col, Column+<span class="number">1</span>):</span><br><span class="line">                tmp = Matrix[row][i]</span><br><span class="line">                Matrix[row][i] = Matrix[max_r][i]</span><br><span class="line">                Matrix[max_r][i] = tmp</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row+<span class="number">1</span>, Row):  <span class="comment"># 消元</span></span><br><span class="line">            <span class="keyword">if</span> Matrix[i][col] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col, Column+<span class="number">1</span>):</span><br><span class="line">                    Matrix[i][j] ^= Matrix[row][j]</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row, Row):  <span class="comment"># 无解</span></span><br><span class="line">        <span class="keyword">if</span> Matrix[i][Column] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> row &amp;lt; Column:  <span class="comment"># 无穷多解</span></span><br><span class="line">        <span class="keyword">return</span> Column-row</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 唯一解</span></span><br><span class="line">    i = Column-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">        X_Ans[i] = Matrix[i][Column]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, Column):</span><br><span class="line">            X_Ans[i] ^= Matrix[i][j] <span class="keyword">and</span> X_Ans[j]</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Synth-V根据颤音自动画响度插件</title>
    <url>/2021/04/06/Synth-V%E6%A0%B9%E6%8D%AE%E9%A2%A4%E9%9F%B3%E8%87%AA%E5%8A%A8%E7%94%BB%E5%93%8D%E5%BA%A6%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>一个月前给Synth V写了个脚本，用于根据颤音自动画响度，解放双手，再也不用握着鼠标描参数曲线辣！<strong>项目地址</strong>：<a href="https://github.com/Rheinhauss/SynthV_plugin_auto_loudness_by_vibrato">Rheinhauss/SynthV_plugin_auto_loudness_by_vibrato</a></p>
<p>暂时只有<code>覆盖原响度</code>和<code>叠加在原响度上</code>的模式。可以自行设置合适的强度和曲线精度（每四分音符 参数点的数量），也可以选择是否简化响度曲线。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>选取（可多选）你想让本插件处理的音符，点击<code>脚本 -&gt; tool -&gt; 根据颤音设置响度</code>，设置合适的参数，然后执行。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不支持在音符内部有bpm改变的情况</p>
<h3 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h3><p>其实还挺简单的，Synth V颤音参数描述的就是一个正弦曲线，所以：</p>
<ol>
<li><p>遍历获取相应音符颤音参数</p>
</li>
<li><p> <code>Math.sin()；</code></p>
</li>
<li><p>写入</p>
</li>
</ol>
<p>就完事了。</p>
<p>麻烦的地方在于一点点文档里没有说明<em>（或者我没看到..）</em>的坑：</p>
<ul>
<li><p>音符如果没有设置相关参数，则获取出来是 <code>NaN</code> ，所以要形如 <code>if (isNaN(n.attr.tF0VbrStart)) n.attr.tF0VbrStart = attrDefault.tF0VbrStart;</code> 来fallback到音轨的默认参数上；</p>
</li>
<li><p>音轨如果没有设置默认参数，则获取出来是 <code>undefined</code> ，所以要形如 <code>if (attrDefault.tF0VbrStart === undefined) attrDefault.tF0VbrStart = 0.250;</code> 检查一下；</p>
</li>
<li><p>文档里没说一些重要的对象怎么获得<em>（或者我没看到..）</em>，所以要么找官方示例要么自己摸索。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Synth V</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub-Pages自定义域名原理</title>
    <url>/2021/04/07/Github-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="GitHub-Pages-用法"><a href="#GitHub-Pages-用法" class="headerlink" title="GitHub Pages 用法"></a>GitHub Pages 用法</h2><p>GitHub Pages <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">提供了自定义域名的功能</a>，可以通过如下操作来配置：</p>
<ol>
<li><p>在相应repo的设置里找到 Custom Domain 进行设置。</p>
 <img src="/2021/04/07/Github-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8E%9F%E7%90%86/image-20210407164637971.png" alt="image-20210407164637971" style="zoom:67%;"></li>
<li><p>在自己的DNS提供商处设置CNAME记录，例如把 <code>null.sakuya.world</code> 指向 <code>rheinhauss.github.io</code> 。</p>
</li>
</ol>
<p>更详细的信息请参阅 GitHub 相关文档。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>自然我们要研究一下是怎么实现的（看上去就是普普通通的 CNAME ）。</p>
<p>假设两种情况：</p>
<ol>
<li><p>只在DNS提供商那里设置CNAME，如图<br> <img src="/2021/04/07/Github-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8E%9F%E7%90%86/image-20210407165622647.png" alt="image-20210407165622647"></p>
<p> 此时访问 <code>test.null.sakuya.world</code> 返回的是GitHub的404页面</p>
 <img src="/2021/04/07/Github-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8E%9F%E7%90%86/image-20210407165907442.png" alt="image-20210407165907442" style="zoom:67%;"></li>
<li><p>只在GitHub的repo设置里配置Custom Domain，访问该自定义网址，有</p>
 <img src="/2021/04/07/Github-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8E%9F%E7%90%86/image-20210407170201369.png" alt="image-20210407170201369" style="zoom:80%;"></li>
</ol>
<p>这是为什么呢？于是尝试 <code>dig</code> 和抓包来分析发生了什么。</p>
<p>我使用的是BIND工具包里的dig。</p>
<p>执行 <code>dig +trace null.sakuya.world</code> ，得到结果</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.13 &lt;&lt;&gt;&gt; +trace null.sakuya.world</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      f.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      l.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      k.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      e.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      b.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      m.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      d.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      c.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      j.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      g.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      a.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      h.root-servers.net.</span><br><span class="line">.                      <span class="number"> 437031 </span> IN      NS      i.root-servers.net.</span><br><span class="line">;; Received<span class="number"> 267 </span>bytes from 10.0.0.13<span class="comment">#53(10.0.0.13) in 5 ms</span></span><br><span class="line">// 获取根服务器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">world.                 <span class="number"> 172800 </span> IN      NS      demand.gamma.aridns.net.au.</span><br><span class="line">world.                 <span class="number"> 172800 </span> IN      NS      demand.alpha.aridns.net.au.</span><br><span class="line">world.                 <span class="number"> 172800 </span> IN      NS      demand.delta.aridns.net.au.</span><br><span class="line">world.                 <span class="number"> 172800 </span> IN      NS      demand.beta.aridns.net.au.</span><br><span class="line">world.                 <span class="number"> 86400 </span>  IN      DS     <span class="number"> 32434 </span>8<span class="number"> 1 </span>1596E70AD9CA4E41EC20414EC7DE740257786677</span><br><span class="line">world.                 <span class="number"> 86400 </span>  IN      DS     <span class="number"> 32434 </span>8<span class="number"> 2 </span>18643A414DCC7EE02580E7A21793A0F63F5393C400DE9CA004465755 BF7CFF05</span><br><span class="line">world.                 <span class="number"> 86400 </span>  IN      RRSIG   DS<span class="number"> 8 </span>1<span class="number"> 86400 </span>20210419170000<span class="number"> 20210406160000 </span>14631 . ZK3ZM0VBTHPGMhdmX4W9LW/2e+TrC/afrnCzCc14X9U+h/OILV28EX1L dRY1zqGCZZpvnb5qsiaYIiDDdOurhgESTDwOO7XQGs8Hx9XFxc9dEFV+ FF0Ynx4WiZV+pZMxCf4L5H1aUaOWPGyuZHxTGyUdYECnrbivivzfjUD2 9VL3eUeLEOONPV7H83shzPybhxh9NjDCSYfljYgRzt48TrlUUAJE2z39 wtWHEyOraCk4e9XobaFmwNTuUFvqTFuf/+4zDGLkNnxpNaQofn5dFM9t EMI7jG0MqZw6nKMy5jv8BR7Y7+of4ZXJhCK9Dic5IVlZ62K+j/z5Urgr SUNG/A==</span><br><span class="line">;; Received<span class="number"> 741 </span>bytes from 2001:7fe::53<span class="comment">#53(i.root-servers.net) in 31 ms</span></span><br><span class="line">// 从根服务器获取顶级域名记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sakuya.world.          <span class="number"> 86400 </span>  IN      NS      ns3.he.net.</span><br><span class="line">sakuya.world.          <span class="number"> 86400 </span>  IN      NS      ns5.he.net.</span><br><span class="line">sakuya.world.          <span class="number"> 86400 </span>  IN      NS      ns2.he.net.</span><br><span class="line">sakuya.world.          <span class="number"> 86400 </span>  IN      NS      ns4.he.net.</span><br><span class="line">domi2ilach7iekt0e4kfuv9gfj62vr0u.world.<span class="number"> 86400 </span>IN NSEC3<span class="number"> 1 </span>1<span class="number"> 1 </span>7CD0CF42 DOUN8CS85QFN98IORLO2HVUF2L5F696S NS SOA RRSIG DNSKEY NSEC3PARAM</span><br><span class="line">domi2ilach7iekt0e4kfuv9gfj62vr0u.world.<span class="number"> 86400 </span>IN RRSIG NSEC3<span class="number"> 8 </span>2<span class="number"> 86400 </span>20210507082438<span class="number"> 20210407072438 </span>19704 world. Zhf5SHBslCcz9c1ywuoqo8jLKnxtHU2zgpb7SpHsES3IrKLLCa2cxNDN 2DGh2Dcdjx9nR+j0yGI5DSawLE9QTEZC0TKC/cn4BWXPbkyHEaA6KpDm cTPuKRdWvRD99zG8AJIF+MhC4mpZIPDeaVVK5udtwqn2rA+B6tc7LNbk thSpYeFg6NAbuie7p+O0UUga+6EVb+nesp0lbiWejOdEXw==</span><br><span class="line">5lp930j1svf536kt4a909i566itlnoa8.world.<span class="number"> 86400 </span>IN NSEC3<span class="number"> 1 </span>1<span class="number"> 1 </span>7CD0CF42 5MEH8F935EFLDLTPKHCTE9LRBA958KVS NS DS RRSIG</span><br><span class="line">5lp930j1svf536kt4a909i566itlnoa8.world.<span class="number"> 86400 </span>IN RRSIG NSEC3<span class="number"> 8 </span>2<span class="number"> 86400 </span>20210506165014<span class="number"> 20210406162719 </span>19704 world. m1rvU0mRNT7PdV80wp1F8oW3mYl0LUYyZxxNYPBtHjhvy1//2SATsyzD Z+/LUVBbfiWW6cJP4Ey8bhOwExB+faZF3qbKL7/bUpFe5Sy/BZXJiFKw DgFeYAYTPY9WtTWNpxnEvqm6g0N83yLj7EpUuOex87uBkrJZ+cIR4a0K RklrxgZRA2NuHfWvdAdTY/ach21k8kkba/Ao0dJjmn2ZPQ==</span><br><span class="line">;; Received<span class="number"> 690 </span>bytes from 2001:dcd:1::7<span class="comment">#53(demand.alpha.aridns.net.au) in 29 ms</span></span><br><span class="line">//从上条获取的 demand.xxxx.aridns.net.au 获取二级域名记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">null.sakuya.world.     <span class="number"> 86400 </span>  IN      CNAME   rheinhauss.github.io.</span><br><span class="line">;; Received<span class="number"> 80 </span>bytes from 2001:470:200::2<span class="comment">#53(ns2.he.net) in 72 ms</span></span><br></pre></td></tr></table></figure>

<p>最终是CNAME到 <code>rheinhauss.github.io</code> ，于是继续 <code>dig +trace rheinhauss.github.io</code> ，得到</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.13 &lt;&lt;&gt;&gt; +trace rheinhauss.github.io</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      i.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      d.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      g.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      e.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      k.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      l.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      a.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      b.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      h.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      c.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      f.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      m.root-servers.net.</span><br><span class="line">.                      <span class="number"> 436307 </span> IN      NS      j.root-servers.net.</span><br><span class="line">;; Received<span class="number"> 267 </span>bytes from 10.0.0.13<span class="comment">#53(10.0.0.13) in 6 ms</span></span><br><span class="line"></span><br><span class="line">io.                    <span class="number"> 172800 </span> IN      NS      a2.nic.io.</span><br><span class="line">io.                    <span class="number"> 172800 </span> IN      NS      b0.nic.io.</span><br><span class="line">io.                    <span class="number"> 172800 </span> IN      NS      c0.nic.io.</span><br><span class="line">io.                    <span class="number"> 172800 </span> IN      NS      a0.nic.io.</span><br><span class="line">io.                    <span class="number"> 86400 </span>  IN      DS     <span class="number"> 57355 </span>8<span class="number"> 2 </span>95A57C3BAB7849DBCDDF7C72ADA71A88146B141110318CA5BE672057 E865C3E2</span><br><span class="line">io.                    <span class="number"> 86400 </span>  IN      RRSIG   DS<span class="number"> 8 </span>1<span class="number"> 86400 </span>20210419170000<span class="number"> 20210406160000 </span>14631 . LesMUo9DIF7nZqdiU1/I8zkBc2tH/eGmSngiWhaWTdHc6GhiXYmuMOY3 PGaGLE0dp99x1sQSvs5lRuYIqH5XGRYvvtzQjibGN12X4MqdzqAqsNEN MUdDE60ACi7qlGck87c4a66yeFsgShi/3mC95E2JnsZMWiHNcdgN0vrS zpBMDSvDYtE+VtwHOydLztjym6oZrmNEbIWYQ9ZExLZWaB5DehvZpXcC xSheLgKdYM/r1OBEuyqRZhwzXn7gwu6nmwKRQQuCK2pDV4ZEwjuZphlW nZL7wdKSAlfh2HIyT6pCvuOnwn8Hv7JPUWzciNBS7sWHOTcSTpD7Offc jqCDEQ==</span><br><span class="line">;; Received<span class="number"> 660 </span>bytes from 2001:500:1::53<span class="comment">#53(h.root-servers.net) in 21 ms</span></span><br><span class="line"></span><br><span class="line">github.io.             <span class="number"> 86400 </span>  IN      NS      dns2.p05.nsone.net.</span><br><span class="line">github.io.             <span class="number"> 86400 </span>  IN      NS      ns-692.awsdns-22.net.</span><br><span class="line">github.io.             <span class="number"> 86400 </span>  IN      NS      dns3.p05.nsone.net.</span><br><span class="line">github.io.             <span class="number"> 86400 </span>  IN      NS      ns-1622.awsdns-10.co.uk.</span><br><span class="line">github.io.             <span class="number"> 86400 </span>  IN      NS      dns1.p05.nsone.net.</span><br><span class="line">0d790076pp5pfktg2hrthj5bj6ckckcb.io.<span class="number"> 900 </span>IN NSEC3<span class="number"> 1 </span>1<span class="number"> 10 </span>332539EE7F95C32A 0D7BD4G2J0SLS1QJ0OVHK6NSRI6V9MIK NS SOA RRSIG DNSKEY NSEC3PARAM</span><br><span class="line">0d790076pp5pfktg2hrthj5bj6ckckcb.io.<span class="number"> 900 </span>IN RRSIG NSEC3<span class="number"> 8 </span>2<span class="number"> 900 </span>20210428091714<span class="number"> 20210407081714 </span>31080 io. WNkdcw4u54lGQaemuSd4RWHn2KMvrXDroN+hP0OrRKd6UlmyCfTVO2tm sLUnVdAdollhmKiq6BNYwkZ1dO+B1It8b7NSUY94d4wmxfC/4ePScXyp wmM0aQXOxQHskWksUmtym1793RKTJFxOOZWoB1epWattt4+eW8o+Ne79 zeo=</span><br><span class="line">0jecjt17pqtnq6cj627kpnf4n06hphai.io.<span class="number"> 900 </span>IN NSEC3<span class="number"> 1 </span>1<span class="number"> 10 </span>332539EE7F95C32A 0JES1F5OD9SG1E4CCRGBS865PMBUV4PC NS DS RRSIG</span><br><span class="line">0jecjt17pqtnq6cj627kpnf4n06hphai.io.<span class="number"> 900 </span>IN RRSIG NSEC3<span class="number"> 8 </span>2<span class="number"> 900 </span>20210422151640<span class="number"> 20210401141640 </span>31080 io. jCQEKBD8H79jGL2KZqtCm9YC2ptX2j9v9ZON2IbkNgCEsd3s08tITkPT krnxJ9ksiZLqHzMR86ejBAtIEFpheQIFJG7n6CzYOlGUsC3dc5NPYlp1 jVzr/bifk9Cft2gcl/A726Eg1QjpLGIC3BqJMryKyt9Kh7ymip9o4oOR 7Ts=</span><br><span class="line">;; Received<span class="number"> 686 </span>bytes from 2a01:8840:9e::17<span class="comment">#53(a0.nic.io) in 94 ms</span></span><br><span class="line"></span><br><span class="line">rheinhauss.github.io.  <span class="number"> 3600 </span>   IN      A       185.199.108.153</span><br><span class="line">rheinhauss.github.io.  <span class="number"> 3600 </span>   IN      A       185.199.109.153</span><br><span class="line">rheinhauss.github.io.  <span class="number"> 3600 </span>   IN      A       185.199.111.153</span><br><span class="line">rheinhauss.github.io.  <span class="number"> 3600 </span>   IN      A       185.199.110.153</span><br><span class="line">github.io.             <span class="number"> 900 </span>    IN      NS      dns1.p05.nsone.net.</span><br><span class="line">github.io.             <span class="number"> 900 </span>    IN      NS      dns2.p05.nsone.net.</span><br><span class="line">github.io.             <span class="number"> 900 </span>    IN      NS      dns3.p05.nsone.net.</span><br><span class="line">github.io.             <span class="number"> 900 </span>    IN      NS      dns4.p05.nsone.net.</span><br><span class="line">github.io.             <span class="number"> 900 </span>    IN      NS      ns-1339.awsdns-39.org.</span><br><span class="line">github.io.             <span class="number"> 900 </span>    IN      NS      ns-1622.awsdns-10.co.uk.</span><br><span class="line">github.io.             <span class="number"> 900 </span>    IN      NS      ns-393.awsdns-49.com.</span><br><span class="line">github.io.             <span class="number"> 900 </span>    IN      NS      ns-692.awsdns-22.net.</span><br><span class="line">;; Received<span class="number"> 339 </span>bytes from 2600:9000:5302:b400::1<span class="comment">#53(ns-692.awsdns-22.net) in 39 ms</span></span><br></pre></td></tr></table></figure>

<p>可知，最终解析得到的是四个A记录。</p>
<p>对于只在GitHub的repo设置里配置Custom Domain的情况，在第一步就会失败；对于只在DNS提供商那里设置CNAME的情况，这两步都能顺利执行得到四个A记录。但是直接访问此ip是无法访问我们的 Github Pages 的。原因在于请求头里的 <code>Host</code> 字段。</p>
<p> 我们知道，不同的域名通过A记录或者CNAME方式可以连接都同一个IP下，同一个IP也可以设置多个不同站点，那我访问不同的域名都转发到同一IP，怎么区分这些不同的站点呢，就是用的Host字段。Host字段就是”originally requested domain”，相当于我们在地址栏里输入的域名。</p>
<p>访问 <code>null.sakuya.world</code> 时 Fiddler 抓包可发现</p>
<p><img src="/2021/04/07/Github-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8E%9F%E7%90%86/image-20210407173303458.png" alt="image-20210407173303458"></p>
<p>因此我们可以得知，当 Github Pages 接受到的 HTTP 请求中， Host 字段的内容在CNAME文件里有描述时，返回对应仓库中的内容。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Github pages 的文档中有一段话</p>
<blockquote>
<p><strong>Warning:</strong> We strongly recommend not using wildcard DNS records, such as <code>*.example.com</code>. A wildcard DNS record will allow anyone to host a site at one of your subdomains.</p>
</blockquote>
<p>即不要用 <code>*.example.com</code> 的 CNAME 用于 Github pages服务。原因就是任何人都可以在Github pages利用你的子域名。如果 xxx.example.com 已被用于现有的 github pages 服务，那么添加 Custom Domain 时会有提示；如果还没有占用，则可以添加</p>
<img src="/2021/04/07/Github-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8E%9F%E7%90%86/image-20210407175359804.png" alt="image-20210407175359804" style="zoom:80%;">

<p>此时如果DNS记录里含有 <code>*.example.com</code> 的CNAME记录，那么就可以用这个子域名成功访问pages。</p>
<p>有人可能会好奇，不是CNAME到 <code>rheinhauss.github.io</code> 吗？这个是我自己的pages服务呀？原因在于，<code>*.github.io</code>，或者说整个pages服务最终就解析到那几个ip，效果是一样的。</p>
<p>语无伦次，请见谅。</p>
]]></content>
      <tags>
        <tag>DNS, GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp_vector_用迭代器初始化</title>
    <url>/2021/04/13/cpp-vector-%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<p>前几日突发奇想，既然可以用迭代器给vector初始化，那如果用一些奇奇怪怪的迭代器进行初始化会怎么样呢？话不多说，实验一下(环境为<code>gcc 9.3.0-17ubuntu1~20.04</code>)，代码如下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要c++11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span>* argv[])</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec1&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec2&#123;<span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> a = &#123;vec2.<span class="built_in">end</span>(), vec1.<span class="built_in">begin</span>()&#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vec3</span><span class="params">(a)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vec4</span><span class="params">(vec1.end(), vec2.begin())</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vec5</span><span class="params">(vec1.end(), vec1.begin())</span></span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec6&#123;vec1.<span class="built_in">end</span>(), vec2.<span class="built_in">begin</span>()&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>是搞出来了两个迭代器作为元素的vector呢还是直接复制两个迭代器地址之间的内容？</p>
<p>实验结果是：</p>
<ul>
<li><p><code>vec3</code>导致编译时报错  </p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">没有与参数列表匹配的构造函数 <span class="string">&quot;std::vector&lt;_Tp, _Alloc&gt;::vector [其中 _Tp=int, _Alloc=std::allocator&lt;int&gt;]&quot;</span> 实例 -- 参数类型为:  (std::initializer_list&lt;__gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *, std::vector&lt;<span class="keyword">int</span>, std::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;&gt;)</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>vec5</code>导致运行时报错  </p>
  <figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">terminate called after throwing an<span class="built_in"> instance </span>of &#x27;std::length_error&#x27;</span><br><span class="line">  what():  cannot create std::vector larger than max_size()</span><br></pre></td></tr></table></figure>

</li>
<li><p>注释掉<code>vec3</code>、<code>vec5</code>后，可发现其余vector内部存放的数据</p>
  <img src="/2021/04/13/cpp-vector-%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/image-20210413210624685.png" alt="image-20210413210624685" style="zoom:80%;"></li>
</ul>
<p>以上结果是为什么呢？</p>
<p>首先介绍一下背景知识：</p>
<ul>
<li><p>C++11引入了新类型，叫做 <code>std::initializer_list</code>，即大括号初始化列表，用于列表初始化一个对象。<br>  当遇到以下情况时一个<code>initializer_list</code>被自动创建（copy自cppreference）：</p>
<ul>
<li>a <em>braced-init-list</em> is used to <a href="https://en.cppreference.com/w/cpp/language/list_initialization">list-initialize</a> an object, where the corresponding constructor accepts an <code>std::initializer_list</code> parameter</li>
<li>a <em>braced-init-list</em> is used as the right operand of <a href="https://en.cppreference.com/w/cpp/language/operator_assignment#Builtin_direct_assignment">assignment</a> or as a <a href="https://en.cppreference.com/w/cpp/language/overload_resolution#Implicit_conversion_sequence_in_list-initialization">function call argument</a>, and the corresponding assignment operator/function accepts an <code>std::initializer_list</code> parameter</li>
<li>a <em>braced-init-list</em> is bound to <a href="https://en.cppreference.com/w/cpp/language/auto"><code>auto</code></a>, including in a <a href="https://en.cppreference.com/w/cpp/language/range-for">ranged for loop</a></li>
</ul>
<p>  C++11允许构造函数和其他函数把初始化列表当做参数，使用方法如下</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myVector</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;T&gt; m_vec;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">myVector</span>(<span class="keyword">const</span> std::initializer_list&lt;T&gt;&amp; v) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : v)</span><br><span class="line">            m_vec.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> index) &#123; <span class="keyword">return</span> m_vec[index]; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p> 背景知识介绍完了，那就来结合源码解释一下实验现象8。</p>
<ul>
<li><p><code>vec3</code>的编译时报错：<br>  <code>vec3</code>是<code>vector&lt;int&gt;</code>。接受大括号初始化列表作为参数的构造函数，需要的是内含<code>int</code>的初始化列表，而我们构造的<code>auto a = &#123;vec2.end(), vec1.begin()&#125;;</code>是内含<code>vector&lt;int&gt;::iterator</code>的初始化列表，所以报错<code>没有与参数列表匹配的构造函数</code>。<br>  如果把<code>vec3</code>一行改为<code>  vector&lt;vector&lt;int&gt;::iterator&gt; vec3(a);</code>则可以通过编译。</p>
</li>
<li><p>其余vec的现象的原因是一样的。跟踪代码运行阅读对应源码可知：</p>
  <img src="/2021/04/13/cpp-vector-%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/image-20210413213612781.png" alt="image-20210413213612781" style="zoom:80%;">
  
  <img src="/2021/04/13/cpp-vector-%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/image-20210413213630796.png" alt="image-20210413213630796" style="zoom:80%;">
  
  <img src="/2021/04/13/cpp-vector-%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/image-20210413214627923.png" alt="image-20210413213630796" style="zoom:80%;">
  
  <img src="/2021/04/13/cpp-vector-%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/image-20210413213653848.png" alt="image-20210413213653848" style="zoom:80%;">
  
  <img src="/2021/04/13/cpp-vector-%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/image-20210413213707553.png" alt="image-20210413213707553" style="zoom:80%;">
  
  <img src="/2021/04/13/cpp-vector-%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/image-20210413214724940.png" alt="image-20210413213707553" style="zoom:80%;">
  
  如果给vector的构造函数传两个iterator作为参数，那么就从第一个iterator开始读内存做$n=distance(iterator_a, iterator_b)$次emplace到新的vector里。如果distance超过最大值（这里vec5的情况应该是负溢）则报错。如此一来就能解释vec456的奇妙行为了。当然vec4和vec6没有报错也是环境原因，可能换一个编译器或者系统就会导致那里出错。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>UMLpre_01</title>
    <url>/2021/04/21/UMLpre-01/</url>
    <content><![CDATA[<h2 id="一-项目前景和范围"><a href="#一-项目前景和范围" class="headerlink" title="一.   项目前景和范围"></a><strong>一.</strong>   <strong>项目前景和范围</strong></h2><h3 id="1-项目前景"><a href="#1-项目前景" class="headerlink" title="1. 项目前景"></a>1. 项目前景</h3><h4 id="在校生通过全面课程提醒来提升学习效率"><a href="#在校生通过全面课程提醒来提升学习效率" class="headerlink" title="在校生通过全面课程提醒来提升学习效率"></a><strong>在校生通过全面课程提醒来提升学习效率</strong></h4><p>本项目以实用功能为设计基础，注重实用方面的用户体验。针对在校生用户，每天面对繁多的课程和作业，本项目提供全校所有课程的基本信息，包括课程名称，上课时间地点任课老师，对应作业及截止时间提醒等，帮助用户安排学习日程，以达到提升用户学习效率的目的。</p>
<h3 id="2-项目范围"><a href="#2-项目范围" class="headerlink" title="2. 项目范围"></a>2. 项目范围</h3><h4 id="在校学生"><a href="#在校学生" class="headerlink" title="在校学生"></a><strong>在校学生</strong></h4><p>通过自身账号登录系统查看自己全部的课程内容及相应作业，</p>
<p>参与讨论区评价</p>
<p>与教师互动</p>
<h4 id="系统管理者"><a href="#系统管理者" class="headerlink" title="系统管理者"></a><strong>系统管理者</strong></h4><p>对程序进行更新</p>
<h2 id="二、-涉众分析"><a href="#二、-涉众分析" class="headerlink" title="二、  涉众分析"></a><strong>二、</strong>  <strong>涉众分析</strong></h2><h3 id="1-涉众概要"><a href="#1-涉众概要" class="headerlink" title="1. 涉众概要**"></a><strong>1.</strong> 涉众概要**</h3><table>
<thead>
<tr>
<th><strong>涉众编号</strong></th>
<th><strong>涉众名称</strong></th>
<th><strong>涉众说明</strong></th>
<th><strong>使用系统的方式</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>001</strong></td>
<td>普通学生</td>
<td>学生是使用该系统导入获取课程信息的主体</td>
<td>1.     设置可按周显示的课表  <br>2.     设置并获取课程提醒信息  <br>3.     创建作业待办</td>
</tr>
<tr>
<td><strong>002</strong></td>
<td>系统开发人员</td>
<td>系统开发人员是对系统进行开发和维护的人员</td>
<td>1.     开发课程提醒系统  <br>2.     对程序进行更新</td>
</tr>
</tbody></table>
<h3 id="2-涉众简档"><a href="#2-涉众简档" class="headerlink" title="2. 涉众简档"></a><strong>2. 涉众简档</strong></h3><h4 id="2-1-普通学生"><a href="#2-1-普通学生" class="headerlink" title="2.1 普通学生"></a><strong>2.1</strong> <strong>普通学生</strong></h4><table>
<thead>
<tr>
<th><strong>涉众</strong></th>
<th><strong>001普通学生</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>涉众代表</strong></td>
<td><strong>普通用户代表</strong></td>
</tr>
<tr>
<td><strong>特点</strong></td>
<td><strong>系统的主要使用者,在校大学生</strong></td>
</tr>
<tr>
<td><strong>职责</strong></td>
<td><strong>1.</strong>      <strong>下载并使用该系统</strong>  <br><strong>2.</strong>      <strong>导入并修改可按周查看的课表</strong>  <br><strong>3.</strong>      <strong>获取课前提醒</strong>  <br><strong>4.</strong>      <strong>添加可备注的待办/作业,可设定提醒时间</strong></td>
</tr>
<tr>
<td><strong>成功标准</strong></td>
<td><strong>1.</strong>      <strong>能及时获取课程提醒信息</strong>  <br><strong>2.</strong>      <strong>课表显示周数,课程名称,时间,教师,教室.</strong></td>
</tr>
<tr>
<td><strong>参与</strong></td>
<td><strong>不参与系统建设</strong></td>
</tr>
<tr>
<td><strong>可交付工作</strong></td>
<td><strong>无</strong></td>
</tr>
</tbody></table>
<h4 id="2-2-系统管理员"><a href="#2-2-系统管理员" class="headerlink" title="2.2 系统管理员"></a><strong>2.2</strong> <strong>系统管理员</strong></h4><table>
<thead>
<tr>
<th><strong>涉众</strong></th>
<th><strong>002系统开发人员</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>涉众代表</strong></td>
<td><strong>开发人员代表</strong></td>
</tr>
<tr>
<td><strong>特点</strong></td>
<td><strong>系统的开发者</strong></td>
</tr>
<tr>
<td><strong>职责</strong></td>
<td><strong>1.</strong>      <strong>开发课程提醒系统</strong>  <strong>2.</strong>      <strong>对系统使用中出现的问题进行维护和修复</strong></td>
</tr>
<tr>
<td><strong>成功标准</strong></td>
<td><strong>课程提醒系统运行良好</strong></td>
</tr>
<tr>
<td><strong>参与</strong></td>
<td><strong>参与系统设计</strong></td>
</tr>
<tr>
<td><strong>可交付工作</strong></td>
<td><strong>课程题型系统</strong></td>
</tr>
</tbody></table>
<h2 id="三、-硬数据采样"><a href="#三、-硬数据采样" class="headerlink" title="三、 硬数据采样"></a><strong>三、 硬数据采样</strong></h2><h3 id="1-硬数据采样内容"><a href="#1-硬数据采样内容" class="headerlink" title="1. 硬数据采样内容"></a><strong>1. 硬数据采样内容</strong></h3><p><strong>采用调查问卷形式,问卷内容及结果如下</strong></p>
<p><img src="/2021/04/21/UMLpre-01/clip_image002.jpg" alt="img"></p>
<p><img src="/2021/04/21/UMLpre-01/clip_image004.jpg" alt="img"></p>
<p><img src="/2021/04/21/UMLpre-01/clip_image006.jpg" alt="img"></p>
<h3 id="2-硬数据采样结果分析"><a href="#2-硬数据采样结果分析" class="headerlink" title="2.硬数据采样结果分析"></a><strong>2.硬数据采样结果分析</strong></h3><ol>
<li>有效填写人次54，其中大部分为大一、大二学生</li>
</ol>
<p><img src="/2021/04/21/UMLpre-01/clip_image008.png" alt="img"></p>
<ol start="2">
<li>有2/3的人偶尔在学习生活中错过ddl,对此程序的必要性做出了佐证</li>
</ol>
<p><img src="/2021/04/21/UMLpre-01/clip_image010.png" alt="img"></p>
<ol start="3">
<li>76%的人认为需要课程提醒,证明了本项目的可行性</li>
</ol>
<p><img src="/2021/04/21/UMLpre-01/clip_image012.png" alt="img"></p>
<ol start="4">
<li><strong>结果显示对于：移动设备上的文字通知，桌面设备上的弹窗或窗口，动设备上的铃声、震动，每天定时短信方式发送至手机 四种提醒方式选择人数相似，可以考虑让用户自行选择设置提醒方式</strong></li>
</ol>
<p><img src="/2021/04/21/UMLpre-01/clip_image014.png" alt="img"></p>
<ol start="5">
<li><strong>对于 课程提醒时间 大多数人[85%]选择了每天定时提醒</strong></li>
</ol>
<p><img src="/2021/04/21/UMLpre-01/clip_image016.png" alt="img"></p>
]]></content>
      <categories>
        <category>UML需求工程课程作业</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>UMLpre_02</title>
    <url>/2021/05/19/UMLpre-02/</url>
    <content><![CDATA[<p>这次主要是数据建模相关的结果。</p>
<h2 id="ERD"><a href="#ERD" class="headerlink" title="ERD"></a>ERD</h2><h3 id="简单情况ERD建模"><a href="#简单情况ERD建模" class="headerlink" title="简单情况ERD建模"></a>简单情况ERD建模</h3><p><img src="/2021/05/19/UMLpre-02/image-20210519151540050.png" alt="image-20210519151540050"></p>
<h3 id="根据硬表单的ERD建模"><a href="#根据硬表单的ERD建模" class="headerlink" title="根据硬表单的ERD建模"></a>根据硬表单的ERD建模</h3><p><img src="/2021/05/19/UMLpre-02/image-20210519151600681.png" alt="image-20210519151600681"></p>
<h2 id="DFD"><a href="#DFD" class="headerlink" title="DFD"></a>DFD</h2><h3 id="上下文图"><a href="#上下文图" class="headerlink" title="上下文图"></a>上下文图</h3><p><img src="/2021/05/19/UMLpre-02/image-20210519151632864.png" alt="image-20210519151632864"></p>
<h3 id="0层图"><a href="#0层图" class="headerlink" title="0层图"></a>0层图</h3><p><img src="/2021/05/19/UMLpre-02/image-20210519151643756.png" alt="image-20210519151643756"></p>
<h3 id="1层图"><a href="#1层图" class="headerlink" title="1层图"></a>1层图</h3><p><img src="/2021/05/19/UMLpre-02/image-20210519151653038.png" alt="image-20210519151653038"></p>
<h2 id="微规格说明"><a href="#微规格说明" class="headerlink" title="微规格说明"></a><strong>微规格说明</strong></h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> bitClassSchedule.app</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span></span><br><span class="line">CASE1 (<span class="keyword">without</span>-ClassTable-<span class="keyword">database</span>)</span><br><span class="line">4Action1: <span class="keyword">show</span> <span class="keyword">add</span> data <span class="keyword">View</span></span><br><span class="line">4Action2: <span class="keyword">get</span> the classSchedule <span class="keyword">Input</span>(.xls File)</span><br><span class="line">4Action3: <span class="keyword">create</span> the ClassTable <span class="keyword">database</span></span><br><span class="line">CASE2(ClassTable-Created)</span><br><span class="line">4Action1: <span class="keyword">show</span> the basic main <span class="keyword">Window</span></span><br><span class="line">4Action2: count <span class="type">date</span></span><br><span class="line">Action3: <span class="keyword">create</span> Button[本周课表] <span class="keyword">and</span> [我的作业待办]</span><br><span class="line">Action4: <span class="keyword">search</span> the <span class="keyword">DataBase</span> <span class="keyword">and</span> <span class="keyword">show</span> today’s <span class="keyword">class</span> information</span><br><span class="line">Action(OnClickButton[本周课表]): change <span class="keyword">View</span> <span class="keyword">to</span> bzkebiao</span><br><span class="line">4Action1: <span class="keyword">create</span> basic layout</span><br><span class="line">4Action2: count week</span><br><span class="line">Action3: <span class="keyword">search</span> the ClassTable.db <span class="keyword">database</span> <span class="keyword">and</span> <span class="keyword">create</span> the bzkebiao</span><br><span class="line">Action4: <span class="keyword">set</span> OnClickListener(show_class_information) <span class="keyword">on</span> <span class="keyword">all</span> the <span class="keyword">class</span> textview shown <span class="keyword">on</span> bzkebiao.xml</span><br><span class="line">Action(OnClickTextView[show_class_information]):</span><br><span class="line">4Action1: Alert <span class="keyword">View</span> class_inf_basic.xml</span><br><span class="line">Action2: <span class="keyword">Search</span> ClassTable.db, collect <span class="keyword">and</span> <span class="keyword">show</span> <span class="keyword">all</span> the Information <span class="keyword">or</span> the chosen <span class="keyword">class</span> </span><br><span class="line">4Action(OnClickButton[我的作业待办]):change <span class="keyword">View</span> <span class="keyword">to</span> daiban.xml</span><br><span class="line">44Action1: <span class="keyword">create</span> the basic layout(<span class="keyword">with</span> “<span class="keyword">add</span>”,”clear” button)</span><br><span class="line">Action2: <span class="keyword">database</span>(daiban.db) <span class="keyword">exists</span>? <span class="keyword">Read</span> daiban.db : <span class="keyword">create</span> daiban.<span class="keyword">database</span></span><br><span class="line">44Action3: sort <span class="keyword">all</span> the daiban_work <span class="keyword">by</span> <span class="type">time</span>, <span class="keyword">show</span></span><br><span class="line">44Action(OnClick “<span class="keyword">add</span>” Button):</span><br><span class="line">444Action1: Change <span class="keyword">to</span> <span class="keyword">View</span> add_daiban.xml</span><br><span class="line">444Action2: <span class="keyword">write</span> the daiban_work information</span><br><span class="line">444Action3: put daiban_work <span class="keyword">in</span> <span class="keyword">database</span></span><br><span class="line">44Action(OnClickButton[clear]):</span><br><span class="line">444Action1: remove daiban.db</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a><strong>数据字典</strong></h2><table>
<thead>
<tr>
<th>名称</th>
<th>课程信息</th>
</tr>
</thead>
<tbody><tr>
<td>别名</td>
<td></td>
</tr>
<tr>
<td>使用的地点和方法</td>
<td>保存课程信息(input)   <br>显示今日课程(output)  <br>展示本周课程信息(output)  <br>发送课程信息(input)  <br>显示课程详细信息(output)</td>
</tr>
<tr>
<td>描述</td>
<td>1.     <code>Classname = Text </code> <br>2.     <code>Zhouci = [”&#123;1~20&#125;-&#123;1~20&#125;周” or”&#123;1~20&#125;周” ]  例:1-8周| 12周</code>  <br>3.     <code>Kaishi =[第&#123;1-13&#125;节]</code>  <br>4.     <code>Jieshu=[第&#123;1-13&#125;节]</code>  <br>5.     <code>Teacher=text</code>  <br>6.     <code>教室 = text</code></td>
</tr>
<tr>
<td>格式</td>
<td><code>SQLite database Information  In table Class</code></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>名称</th>
<th>待办</th>
</tr>
</thead>
<tbody><tr>
<td>别名</td>
<td>Daiban_work(in AddView.java and  MyTask.java)</td>
</tr>
<tr>
<td>使用的地点和方法</td>
<td>存储待办(input)<br>  显示待办(output)<br>  删除待办(input)<br>  查找待办(output)</td>
</tr>
<tr>
<td>描述</td>
<td>1.     <code>Created_time = [2021+]Year+[1-12]month+[1-31]date+[0-24]hour+[0-60]min</code><br>  2.     <code>Inf= text</code><br>  3.     <code>Deadline=同Create_time</code><br>  4.     <code>Remind_time=同Create_time</code></td>
</tr>
<tr>
<td>格式</td>
<td><code>SQLite database Information  In table daiban.db</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>UML需求工程课程</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
</search>
