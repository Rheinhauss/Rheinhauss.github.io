<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Synthesizer-V-设置全局缩放的方法</title>
    <url>/2021/04/06/Synthesizer-V-%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E7%BC%A9%E6%94%BE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>众所周知，Synth V Studio在默认的 <code>NotoSansCJKjp-Regular</code> 字体下，界面渲染十分难受，用户看不清字，特别是高分屏，眼睛都快瞎了（），令人无比想念可以在设置内调整界面和字体缩放的第一代Synth V。</p>
<p>解决办法目前有俩：</p>
<ol>
<li>换字体。<code>Synth-V-Studio安装路径\fonts\</code>下替换<code>NotoSansCJKjp-Regular.otf</code>即可。个人推荐使用 <code>Microsoft Yahei Mono</code> （虽然是网友自行拼接<code>微软雅黑</code>和 <code>Consolas</code> 而成的 ），<em><strong>不过可能会有版权问题</strong></em>。``Synth V Studio` 每次升级后都要重新覆盖字体。</li>
<li>通过命令行加参数 <code>--with-scaling &lt;放大倍数&gt;</code> 的方式启动 <code>synthv-studio.exe</code> 。为方便起见可以将此保存成一个快捷方式。<br> <img src="/2021/04/06/Synthesizer-V-%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E7%BC%A9%E6%94%BE%E7%9A%84%E6%96%B9%E6%B3%95/image-20210406152541899.png" alt="image-20210406152541899"></li>
</ol>
]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
      <tags>
        <tag>Synth V</tag>
      </tags>
  </entry>
  <entry>
    <title>以Integer类为例的包装类型装箱拆箱与判断相等</title>
    <url>/2021/04/01/%E4%BB%A5Integer%E7%B1%BB%E4%B8%BA%E4%BE%8B%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1%E4%B8%8E%E5%88%A4%E6%96%AD%E7%9B%B8%E7%AD%89/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">app1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i1 = <span class="number">100</span>;</span><br><span class="line">        Integer j1 = <span class="number">100</span>;</span><br><span class="line">        System.out.println(i1 == j1); <span class="comment">// true </span></span><br><span class="line">        Integer i2 = <span class="number">129</span>;</span><br><span class="line">        Integer j2 = <span class="number">129</span>;</span><br><span class="line">        System.out.println(i2 == j2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么会这样呢.jpg</p>
<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol>
<li><p><code>==</code>判断地址相等</p>
</li>
<li><p>自动装箱时编译器调用<code>valueOf()</code>将原始类型值转换成对象，同时自动拆箱时，编译器通过调用类似<code>intValue()</code>,<code>doubleValue()</code>这类的方法将对象转换成原始类型值。</p>
<ul>
<li><code>Integer c = 200;</code>类似这样触发自动装箱</li>
<li><code>Integer.equals(int a)</code>也对a触发自动装箱</li>
<li><code>Integer == int</code>对<code>Integer</code>类型触发自动拆箱</li>
</ul>
</li>
<li><p><code>Object.equals()</code>默认</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>Integer.equals()</code>重写成</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">            <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 可见<code>Integer.equals()</code>是比较值。</p>
</li>
<li><p><code>Integer.intValue()</code></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> value;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
<li><p><code>Integer.valueOf()</code></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 在常量池中则返回池中引用，否则创建新的<code>Integer</code>对象。</p>
</li>
<li><p><code>Integer.IntegerCache</code>常量池</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cache to support the object identity semantics of autoboxing for values</span></span><br><span class="line"><span class="comment"> * between -128 and 127 (inclusive) as required by JLS.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The cache is initialized on first usage. The size of the cache may be</span></span><br><span class="line"><span class="comment"> * controlled by the &#123;<span class="doctag">@code</span> -XX:AutoBoxCacheMax=&lt;size&gt;&#125; option. During VM</span></span><br><span class="line"><span class="comment"> * initialization, java.lang.Integer.IntegerCache.high property may be set and</span></span><br><span class="line"><span class="comment"> * saved in the private system properties in the jdk.internal.misc.VM class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * WARNING: The cache is archived with CDS and reloaded from the shared archive</span></span><br><span class="line"><span class="comment"> * at runtime. The archived cache (Integer[]) and Integer objects reside in the</span></span><br><span class="line"><span class="comment"> * closed archive heap regions. Care should be taken when changing the</span></span><br><span class="line"><span class="comment"> * implementation and the cache array should not be assigned with new Integer</span></span><br><span class="line"><span class="comment"> * object(s) after initialization.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer[] cache;</span><br><span class="line">    <span class="keyword">static</span> Integer[] archivedCache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue = VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                h = Math.max(parseInt(integerCacheHighPropValue), <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(h, Integer.MAX_VALUE - (-low) - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load IntegerCache.archivedCache from archive, if possible</span></span><br><span class="line">        VM.initializeFromArchive(IntegerCache.class);</span><br><span class="line">        <span class="keyword">int</span> size = (high - low) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the archived cache if it exists and is large enough</span></span><br><span class="line">        <span class="keyword">if</span> (archivedCache == <span class="keyword">null</span> || size &gt; archivedCache.length) &#123;</span><br><span class="line">            Integer[] c = <span class="keyword">new</span> Integer[size];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">                c[i] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">            &#125;</span><br><span class="line">            archivedCache = c;</span><br><span class="line">        &#125;</span><br><span class="line">        cache = archivedCache;</span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>Integer(int)</code>构造函数</p>
 <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Constructs a newly allocated &#123;<span class="doctag">@code</span> Integer&#125; object that</span></span><br><span class="line"><span class="comment">  * represents the specified &#123;<span class="doctag">@code</span> int&#125; value.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>   value   the value to be represented by the</span></span><br><span class="line"><span class="comment">  *                  &#123;<span class="doctag">@code</span> Integer&#125; object.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@deprecated</span></span></span><br><span class="line"><span class="comment">  * It is rarely appropriate to use this constructor. The static factory</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> #valueOf(int)&#125; is generally a better choice, as it is</span></span><br><span class="line"><span class="comment">  * likely to yield significantly better space and time performance.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Deprecated</span>(since=<span class="string">&quot;9&quot;</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.value = value;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>   官方建议用静态工厂方法<code>valueOf(int)</code>替代本构造函数，因为在时间与空间方面的性能都更好。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = Integer.ValueOf(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p> 具体原因如下：</p>
<ul>
<li><code>Integer.ValueOf(int)</code>中有<code>IntegerCache</code>常量池，相当于做了一个缓存，在缓存范围内的都可以直接从缓存中取，而不必生成新的对象，提高了对象的利用率。</li>
</ul>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们用一段代码来总结各种情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">app1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer IntNew200_1 = <span class="keyword">new</span> Integer(<span class="number">200</span>);</span><br><span class="line">        Integer IntNew200_2 = <span class="keyword">new</span> Integer(<span class="number">200</span>);</span><br><span class="line">        Integer IntEqual200_1 = <span class="number">200</span>;</span><br><span class="line">        Integer IntEqual200_2 = <span class="number">200</span>;</span><br><span class="line">        Integer IntNew100_1 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        Integer IntNew100_2 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        Integer IntEqual100_1 = <span class="number">100</span>;</span><br><span class="line">        Integer IntEqual100_2 = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> IntPri200 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;两个new出来200\t\t==\t&quot;</span> + (IntNew200_2 == IntNew200_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个new出来200\t\tequal\t&quot;</span> + IntNew200_2.equals(IntNew200_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;new出200和int装箱200\t==\t&quot;</span> + (IntNew200_2 == IntEqual200_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;new出200和int装箱200\tequal\t&quot;</span> + (IntNew200_2.equals(IntEqual200_1)));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个int装箱200\t\t==\t&quot;</span> + (IntEqual200_1 == IntEqual200_2));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个int装箱200\t\tequal\t&quot;</span> + (IntEqual200_1.equals(IntEqual200_2)));</span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型200和new出200\t==\t&quot;</span> + (IntPri200 == IntNew200_2));</span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型200和new出200\tequal\t&quot;</span> + (IntNew200_2.equals(IntPri200)));</span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型200和int装箱200\t==\t&quot;</span> + (IntPri200 == IntEqual200_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型200和int装箱200\tequal\t&quot;</span> + (IntEqual200_1.equals(IntPri200)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;两个new出来100\t\t==\t&quot;</span> + (IntNew100_2 == IntNew100_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个new出来100\t\tequal\t&quot;</span> + IntNew100_2.equals(IntNew100_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;new出100和int装箱100\t==\t&quot;</span> + (IntNew100_2 == IntEqual100_1));</span><br><span class="line">        System.out.println(<span class="string">&quot;new出100和int装箱100\tequal\t&quot;</span> + (IntNew100_2.equals(IntEqual100_1)));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个int装箱100\t\t==\t&quot;</span> + (IntEqual100_1 == IntEqual100_2));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个int装箱100\t\tequal\t&quot;</span> + (IntEqual100_1.equals(IntEqual100_2)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">两个<span class="keyword">new</span>出来<span class="number">200</span>          ==      <span class="literal">false</span></span><br><span class="line">两个<span class="keyword">new</span>出来<span class="number">200</span>          equal   <span class="literal">true</span> </span><br><span class="line"><span class="keyword">new</span>出<span class="number">200</span>和<span class="keyword">int</span>装箱<span class="number">200</span>    ==      <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span>出<span class="number">200</span>和<span class="keyword">int</span>装箱<span class="number">200</span>    equal   <span class="literal">true</span> </span><br><span class="line">两个<span class="keyword">int</span>装箱<span class="number">200</span>          ==      <span class="literal">false</span></span><br><span class="line">两个<span class="keyword">int</span>装箱<span class="number">200</span>          equal   <span class="literal">true</span> </span><br><span class="line">基本类型<span class="number">200</span>和<span class="keyword">new</span>出<span class="number">200</span>   ==      <span class="literal">true</span></span><br><span class="line">基本类型<span class="number">200</span>和<span class="keyword">new</span>出<span class="number">200</span>   equal   <span class="literal">true</span></span><br><span class="line">基本类型<span class="number">200</span>和<span class="keyword">int</span>装箱<span class="number">200</span> ==      <span class="literal">true</span></span><br><span class="line">基本类型<span class="number">200</span>和<span class="keyword">int</span>装箱<span class="number">200</span> equal   <span class="literal">true</span></span><br><span class="line">两个<span class="keyword">new</span>出来<span class="number">100</span>          ==      <span class="literal">false</span></span><br><span class="line">两个<span class="keyword">new</span>出来<span class="number">100</span>          equal   <span class="literal">true</span></span><br><span class="line"><span class="keyword">new</span>出<span class="number">100</span>和<span class="keyword">int</span>装箱<span class="number">100</span>    ==      <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span>出<span class="number">100</span>和<span class="keyword">int</span>装箱<span class="number">100</span>    equal   <span class="literal">true</span></span><br><span class="line">两个<span class="keyword">int</span>装箱<span class="number">100</span>          ==      <span class="literal">true</span></span><br><span class="line">两个<span class="keyword">int</span>装箱<span class="number">100</span>          equal   <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>对上述Output的理解：</p>
<ol>
<li>调用<code>Integer(int)</code>即创建一个新的对象。<code>==</code>比较地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
<li>调用<code>Integer(int)</code>即创建一个新的对象。<code>==</code>比较地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
<li><code>int</code>自动装箱成<code>Integer</code>，因值大小超出缓存范围，则新建对象，<code>==</code>比较地址。</li>
<li><code>int</code>自动装箱成<code>Integer</code>，<code>Integer.equal()</code>比较值。</li>
<li>比较时<code>Integer</code>自动拆箱成<code>int</code>，原始类型进行比较。</li>
<li>比较时<code>int</code>自动装箱成<code>Integer</code>，<code>equal()</code>比较值。</li>
<li>比较时<code>Integer</code>自动拆箱成<code>int</code>，原始类型进行比较。</li>
<li>比较时<code>int</code>自动装箱成<code>Integer</code>，<code>equal()</code>比较值</li>
<li>调用<code>Integer(int)</code>即创建一个新的对象。<code>==</code>比较地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
<li>调用<code>Integer(int)</code>即创建一个新的对象。<code>==</code>比较地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
<li><code>int</code>自动装箱成<code>Integer</code>，因值大小在缓存范围内，则使用常量池内对象的引用，<code>==</code>比较地址，是同一地址。</li>
<li><code>Integer.equal()</code>比较值。</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>高斯消元解异或方程组</title>
    <url>/2020/08/09/gauss-xor-equation/</url>
    <content><![CDATA[<p>当时遇到了道题，分析之后解异或方程组就完事了。代码如下：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Gauss</span>(<span class="params">Row: <span class="built_in">int</span>, Column: <span class="built_in">int</span></span>):</span></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    col = <span class="number">0</span></span><br><span class="line">    max_r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> row &amp;lt; Row <span class="keyword">and</span> col &amp;lt; Column:</span><br><span class="line">        max_r = row</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row+<span class="number">1</span>, Row):  <span class="comment"># 找出当前列最大值</span></span><br><span class="line">            <span class="keyword">if</span> (Matrix[i][col]) &gt; (Matrix[max_r][col]):</span><br><span class="line">                max_r = i</span><br><span class="line">        <span class="keyword">if</span> Matrix[max_r][col] == <span class="number">0</span>:  <span class="comment"># 记录自由变元</span></span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">            Free_x[Free_num] = col+<span class="number">1</span></span><br><span class="line">            Free_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> max_r != row:  <span class="comment"># 交换</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(col, Column+<span class="number">1</span>):</span><br><span class="line">                tmp = Matrix[row][i]</span><br><span class="line">                Matrix[row][i] = Matrix[max_r][i]</span><br><span class="line">                Matrix[max_r][i] = tmp</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row+<span class="number">1</span>, Row):  <span class="comment"># 消元</span></span><br><span class="line">            <span class="keyword">if</span> Matrix[i][col] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col, Column+<span class="number">1</span>):</span><br><span class="line">                    Matrix[i][j] ^= Matrix[row][j]</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row, Row):  <span class="comment"># 无解</span></span><br><span class="line">        <span class="keyword">if</span> Matrix[i][Column] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> row &amp;lt; Column:  <span class="comment"># 无穷多解</span></span><br><span class="line">        <span class="keyword">return</span> Column-row</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 唯一解</span></span><br><span class="line">    i = Column-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">        X_Ans[i] = Matrix[i][Column]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, Column):</span><br><span class="line">            X_Ans[i] ^= Matrix[i][j] <span class="keyword">and</span> X_Ans[j]</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Synth-V根据颤音自动画响度插件</title>
    <url>/2021/04/06/Synth-V%E6%A0%B9%E6%8D%AE%E9%A2%A4%E9%9F%B3%E8%87%AA%E5%8A%A8%E7%94%BB%E5%93%8D%E5%BA%A6%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>一个月前给Synth V写了个脚本，用于根据颤音自动画响度，解放双手，再也不用握着鼠标描参数曲线辣！<strong>项目地址</strong>：<a href="https://github.com/Rheinhauss/SynthV_plugin_auto_loudness_by_vibrato">Rheinhauss/SynthV_plugin_auto_loudness_by_vibrato</a></p>
<p>暂时只有<code>覆盖原响度</code>和<code>叠加在原响度上</code>的模式。可以自行设置合适的强度和曲线精度（每四分音符 参数点的数量），也可以选择是否简化响度曲线。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>选取（可多选）你想让本插件处理的音符，点击<code>脚本 -&gt; tool -&gt; 根据颤音设置响度</code>，设置合适的参数，然后执行。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不支持在音符内部有bpm改变的情况</p>
<h3 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h3><p>其实还挺简单的，Synth V颤音参数描述的就是一个正弦曲线，所以：</p>
<ol>
<li><p>遍历获取相应音符颤音参数</p>
</li>
<li><p> <code>Math.sin()；</code></p>
</li>
<li><p>写入</p>
</li>
</ol>
<p>就完事了。</p>
<p>麻烦的地方在于一点点文档里没有说明<em>（或者我没看到..）</em>的坑：</p>
<ul>
<li><p>音符如果没有设置相关参数，则获取出来是 <code>NaN</code> ，所以要形如 <code>if (isNaN(n.attr.tF0VbrStart)) n.attr.tF0VbrStart = attrDefault.tF0VbrStart;</code> 来fallback到音轨的默认参数上；</p>
</li>
<li><p>音轨如果没有设置默认参数，则获取出来是 <code>undefined</code> ，所以要形如 <code>if (attrDefault.tF0VbrStart === undefined) attrDefault.tF0VbrStart = 0.250;</code> 检查一下；</p>
</li>
<li><p>文档里没说一些重要的对象怎么获得<em>（或者我没看到..）</em>，所以要么找官方示例要么自己摸索。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Synth V</tag>
      </tags>
  </entry>
</search>
